// MyComponent.tsx
import React, { useRef, useEffect, useState, useCallback } from 'react';

const workerCode = `
  self.onmessage = function(e) {
    const { key, value } = e.data;
    // any heavy compute here...
    self.postMessage({ key, value });
  };
`;

export const MyComponent = () => {
  const [globalState, setGlobalState] = useState<IGlobalState>({ /* … */, loading: false });
  const workerRef = useRef<Worker>();

  useEffect(() => {
    // create a blob URL from our inline code
    const blob = new Blob([workerCode], { type: 'application/javascript' });
    workerRef.current = new Worker(URL.createObjectURL(blob));
    workerRef.current.onmessage = (e: MessageEvent<{ key: string; value: any }>) => {
      const { key, value } = e.data;
      setGlobalState(prev => ({ ...prev, [key]: value, loading: false }));
    };
    return () => workerRef.current?.terminate();
  }, []);

  const setGlobalStateByKey = useCallback((key: string, value: any) => {
    setGlobalState(prev => ({ ...prev, loading: true }));
    workerRef.current?.postMessage({ key, value });
  }, []);

  // …
};
