import React from 'react';
import { render, screen, fireEvent, act } from '@testing-library/react';
import { DataTable } from './DataTable';
import { DataTableContext } from './index';

jest.mock('./utils', () => ({
  getDeepValue: jest.fn(),
  setDeepValue: jest.fn(),
  useDragDropManager: jest.fn(() => ({
    onDragStart: jest.fn(),
    onDragEnd: jest.fn(),
    onDragOver: jest.fn(),
    onDrop: jest.fn(),
    dropTargetIndex: null,
    draggedColumnIndex: null,
  })),
  useResizeManager: jest.fn(() => ({
    onMouseDown: jest.fn(),
  })),
  sortData: jest.fn(),
  exportToCsv: jest.fn(),
  filterCheck: jest.fn(),
  serializeColumns: jest.fn(),
  setColumnSettings: jest.fn(),
  getAdvanceFilterSettingsObj: jest.fn(),
  serialize: jest.fn(),
  updateDataByRowKey: jest.fn(),
  hasDomain: jest.fn(),
  arrayToEmptyObject: jest.fn(),
  getValue: jest.fn(),
  mergeWithPrevious: jest.fn(),
  processData: jest.fn(),
  filterQueryObjByColumns: jest.fn(),
  replaceEndpointValues: jest.fn(),
}));

jest.mock('./components/Rows', () => ({
  Rows: jest.fn(() => <div>Rows Component</div>),
}));

jest.mock('./components/ColumnHeader', () => ({
  ColumnHeader: jest.fn(() => <div>ColumnHeader Component</div>),
}));

jest.mock('./components/Footer', () => ({
  Footer: jest.fn(() => <div>Footer Component</div>),
}));

jest.mock('./components/MainHeader', () => ({
  MainHeader: jest.fn(() => <div>MainHeader Component</div>),
}));

jest.mock('./components/ColumnGroupHeader', () => ({
  ColumnGroupHeader: jest.fn(() => <div>ColumnGroupHeader Component</div>),
}));

jest.mock('./components/ColumnFilters', () => ({
  ColumnFilters: jest.fn(() => <div>ColumnFilters Component</div>),
}));

jest.mock('ajv', () => jest.fn(() => ({
  validate: jest.fn(),
  errorsText: jest.fn(),
})));

describe('DataTable Component', () => {
  let mockProps;

  beforeEach(() => {
    // Define the mock props
    mockProps = {
      dataSource: [{ id: 1, name: 'John Doe' }],
      columnSettings: [
        { column: 'id', title: 'ID' },
        { column: 'name', title: 'Name' }
      ],
      rowKey: 'id',
      pageSize: 5,
      pageIndex: 0,
      selectable: true,
      collapsibleRowHeight: 50,
      actions: ['edit', 'delete'],
      onChange: jest.fn(),
      fetchConfig: null,
      collapsibleRowRender: jest.fn(),
    };

    jest.useFakeTimers(); // Use fake timers to prevent hanging due to setTimeouts or setIntervals
  });

  afterEach(() => {
    jest.runOnlyPendingTimers(); // Run any pending timers to avoid memory leaks
    jest.clearAllTimers(); // Clear all timers after each test
  });

  it('should render the DataTable component with basic structure', () => {
    render(<DataTable {...mockProps} />);

    // Check if sub-components are rendered
    expect(screen.getByText('Rows Component')).toBeInTheDocument();
    expect(screen.getByText('ColumnHeader Component')).toBeInTheDocument();
    expect(screen.getByText('Footer Component')).toBeInTheDocument();
  });

  it('should render the loading panel when there is no data', () => {
    mockProps.dataSource = null;
    render(<DataTable {...mockProps} />);

    expect(screen.getByText('Loading Rows...')).toBeInTheDocument();
  });

  it('should call onChange when row is added', () => {
    const { rerender } = render(
      <DataTableContext.Provider value={mockProps}>
        <DataTable {...mockProps} />
      </DataTableContext.Provider>
    );

    const rowAddFn = mockProps.onChange;

    rerender(
      <DataTableContext.Provider value={mockProps}>
        <DataTable {...mockProps} />
      </DataTableContext.Provider>
    );

    // Simulate adding a row
    fireEvent.click(screen.getByText('Rows Component'));
    expect(rowAddFn).toHaveBeenCalled();
  });

  it('should handle sorting and filtering logic correctly', () => {
    render(<DataTable {...mockProps} />);

    // Mock sorting and filtering logic
    const columnHeader = screen.getByText('ColumnHeader Component');
    fireEvent.click(columnHeader);

    // Check if sorting/filtering logic is applied (mocked in utils)
    expect(screen.getByText('Rows Component')).toBeInTheDocument();
  });

  it('should update the selected rows when user selects rows', () => {
    const mockOnSelectedRowsChange = jest.fn();
    mockProps.onSelectedRowsChange = mockOnSelectedRowsChange;

    render(<DataTable {...mockProps} />);

    // Simulate row selection
    fireEvent.click(screen.getByText('Rows Component'));

    expect(mockOnSelectedRowsChange).toHaveBeenCalled();
  });

  it('should update page size when page size changes', () => {
    const mockOnPageSizeChange = jest.fn();
    mockProps.onPageSizeChange = mockOnPageSizeChange;

    render(<DataTable {...mockProps} />);

    // Simulate changing page size
    fireEvent.click(screen.getByText('Rows Component'));

    expect(mockOnPageSizeChange).toHaveBeenCalled();
  });
});
