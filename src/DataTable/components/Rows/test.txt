import React from 'react';
import { render, screen } from '@testing-library/react';
import { DataTable } from './DataTable';
import { DataTableContext } from './index';

jest.mock('./utils', () => ({
  getDeepValue: jest.fn(),
  setDeepValue: jest.fn(),
  useDragDropManager: jest.fn(() => ({
    onDragStart: jest.fn(),
    onDragEnd: jest.fn(),
    onDragOver: jest.fn(),
    onDrop: jest.fn(),
    dropTargetIndex: null,
    draggedColumnIndex: null,
  })),
  useResizeManager: jest.fn(() => ({
    onMouseDown: jest.fn(),
  })),
  sortData: jest.fn(),
  exportToCsv: jest.fn(),
  filterCheck: jest.fn(),
  serializeColumns: jest.fn(),
  setColumnSettings: jest.fn(),
  getAdvanceFilterSettingsObj: jest.fn(),
  serialize: jest.fn(),
  updateDataByRowKey: jest.fn(),
  hasDomain: jest.fn(),
  arrayToEmptyObject: jest.fn(),
  getValue: jest.fn(),
  mergeWithPrevious: jest.fn(),
  processData: jest.fn(),
  filterQueryObjByColumns: jest.fn(),
  replaceEndpointValues: jest.fn(),
  fetchWithPagination: jest.fn().mockResolvedValue({
    data: [{ id: 1, name: 'John Doe' }],
    totalData: 1,
  }), // Mocking API calls or async functions
}));

jest.mock('./components/Rows', () => ({
  Rows: jest.fn(() => <div>Rows Component</div>),
}));

jest.mock('./components/ColumnHeader', () => ({
  ColumnHeader: jest.fn(() => <div>ColumnHeader Component</div>),
}));

jest.mock('./components/Footer', () => ({
  Footer: jest.fn(() => <div>Footer Component</div>),
}));

jest.mock('./components/MainHeader', () => ({
  MainHeader: jest.fn(() => <div>MainHeader Component</div>),
}));

jest.mock('./components/ColumnGroupHeader', () => ({
  ColumnGroupHeader: jest.fn(() => <div>ColumnGroupHeader Component</div>),
}));

jest.mock('./components/ColumnFilters', () => ({
  ColumnFilters: jest.fn(() => <div>ColumnFilters Component</div>),
}));

jest.mock('ajv', () => jest.fn(() => ({
  validate: jest.fn(),
  errorsText: jest.fn(),
})));

describe('DataTable Component', () => {
  let mockProps;

  beforeAll(() => {
    // Mocking global fetch
    jest.spyOn(global, 'fetch').mockResolvedValue({
      ok: true, // Response is successful
      status: 200, // Status code of 200
      json: jest.fn().mockResolvedValue({
        data: [{ id: 1, name: 'John Doe' }],
      }),
    } as unknown as Response); // Casting to Response
  });

  beforeEach(() => {
    mockProps = {
      dataSource: [{ id: 1, name: 'John Doe' }],
      columnSettings: [
        { column: 'id', title: 'ID' },
        { column: 'name', title: 'Name' }
      ],
      rowKey: 'id',
      pageSize: 5,
      pageIndex: 0,
      selectable: true,
      collapsibleRowHeight: 50,
      actions: ['edit', 'delete'],
      onChange: jest.fn(),
      fetchConfig: null,
      collapsibleRowRender: jest.fn(),
    };

    jest.useFakeTimers(); // Mock timers
  });

  afterEach(() => {
    jest.runOnlyPendingTimers(); // Run pending timers
    jest.clearAllTimers(); // Clear timers
  });

  afterAll(() => {
    jest.restoreAllMocks(); // Restore mocks after all tests
  });

  it('should render the DataTable component with basic structure', async () => {
    render(<DataTable {...mockProps} />);

    // Use await for async operations
    expect(await screen.findByText('Rows Component')).toBeInTheDocument();
  });

  // Additional test cases...
});
