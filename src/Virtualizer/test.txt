// __tests__/TestWrapperForTXDataTable.js
import React, { useState, useEffect, useCallback } from 'react';
import TXDataTableComponent from '../TXDataTableComponent';

const TestWrapperForTXDataTable = () => {
  const [dataSource, setDataSource] = useState([]);
  const [totalRecords, setTotalRecords] = useState(0);

  // The fetchPageData function calls the DummyJSON API and updates parent state.
  const fetchPageData = useCallback(async (values) => {
    const { pageIndex, pageSize } = values;
    // Using DummyJSON's API (for example, "users" endpoint)
    const response = await fetch(
      `https://dummyjson.com/users?limit=${pageSize}&skip=${pageIndex * pageSize}`
    );
    if (!response.ok) {
      throw new Error('Network response was not ok');
    }
    const json = await response.json();
    // DummyJSON returns an object with "users" and "total" keys.
    // We'll map it to your expected structure:
    setDataSource(json.users);
    setTotalRecords(json.total);
    return { data: json.users, totalData: json.total };
  }, []);

  // Simulate an initial fetch when the component mounts
  useEffect(() => {
    fetchPageData({ pageIndex: 0, pageSize: 10 });
  }, [fetchPageData]);

  return (
    <TXDataTableComponent
      columnSettings={[{ title: 'Name', column: 'firstName' }]} // adjust based on DummyJSON structure
      dataSource={dataSource}
      totalItems={totalRecords}
      ssrConfig={{
        fetchPageData,
        // Optionally add other callbacks like allData or onDownloadAllClick
      }}
    />
  );
};

export default TestWrapperForTXDataTable;


// __tests__/TXDataTable.test.js
import React from 'react';
import { render, waitFor, screen } from '@testing-library/react';
import TestWrapperForTXDataTable from './TestWrapperForTXDataTable';

// Cast global.fetch as a jest.Mock so TypeScript recognizes mock methods
const fetchMock = global.fetch as jest.Mock;

describe('TXDataTableComponent with parent state management (using DummyJSON)', () => {
  beforeEach(() => {
    fetchMock.mockClear();
  });

  test('should fetch page data and update parent state to render records with total count', async () => {
    // Create a fake API response mimicking DummyJSON's structure
    const fakePageDataResponse = {
      users: Array.from({ length: 10 }, (_, i) => ({
        id: i + 1,
        firstName: `Name ${i + 1}`,
        lastName: `Last ${i + 1}`,
        username: `username${i + 1}`,
        email: `email${i + 1}@dummy.com`,
      })),
      total: 100,
    };

    // Setup the fetch mock to resolve with fakePageDataResponse.
    // Even though we call DummyJSON in our fetchPageData, this mock intercepts it.
    fetchMock.mockResolvedValueOnce({
      ok: true,
      json: async () => fakePageDataResponse,
    });

    // Render the wrapper component that manages state.
    render(<TestWrapperForTXDataTable />);

    // Wait for the fetch to be called and for state to update.
    await waitFor(() => expect(fetchMock).toHaveBeenCalled());

    // Validate that a record is rendered. For example, "Name 1" should be visible.
    expect(screen.getByText('Name 1')).toBeInTheDocument();

    // Validate that the total count (100) is rendered somewhere in the component.
    expect(screen.getByText(/100/)).toBeInTheDocument();
  });
});
