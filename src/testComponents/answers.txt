1. possible for old and new to co-exists? 2. if no, how do we plan the migration? 3. if migration, should we take the opportunity to strategize. E.g. service bench, nextjs etc?.

above is the questions i have and below is my answer can you rework the answer i have so it will be more professional tone?.

1. it is not possible, because our old code is using react17 and new one uses react19 which will not work because the hooks and context from both version works differently, so even if we force install lightweight react-components-lib into our current txApp it will break at runtime.
2. We can start using the new microfrontend + react-components-lib like what wtp team did but for txApp we can rework some of the approach and strategies in development like:
  2.1. we no longer need separate repository for atoms, molecules, organism. All of this custom components for txApp will now be inside txApp itself inside common folder, we only need to use the react-components-lib as an external library then any custom components that we have for example common headers, common buttons with extra feature like adding some built-in icon.
  2.2. we start using the FormRenderer I built, this component replaces the manual creation of organisms which will make the development faster and easier + we no longer need to worry about organism optimization since this component takes care all of it.
  2.3. we should have some solid "how to do" structure for creating modules or screen, as of now i noticed that every team have its own way of developing module and because of this some optimization is being negelected and the result is poor performance, and since we (framework team) dont have any way to check the commited implementation we cannot suggest if the approach is good or not. I understand that this will take more time from them since they need to ask PR review from us before it can be merge, but this way we can avoid the future issue like what we currently have right now regarding the performance.
3. NextJS is solid library but im afraid that the machine we use will catch up with nextjs development in local requires a lot of recouces e.g cpu cores, ram, ssd but i will try if we can do something about it because nextjs will definitely make the development easier becaus of it provides a lot of library we need and this is much secure with industry standard approach specially in auth. on the other hand microfrontend i created can work on its own without using nextjs since it is created in vitejs, if we go to nextjs approach i will need to create a microfrontend that uses nextjs instead of vitejs, this may take 1-3 days for me, depending of if found some issue.

summary:
We cannot use both react17 and react19 at the same time so we need to migrate, use microfrontend + react-components-lib then create solid module structure for module devs to follow, either use nextjs or go with the new microfrontend current structure which is vitejs. I can start doing POC on this one but i need someone who knows the backend side, i may need some info on how the api is being used right now so i can strategies on what approach should i use for easier maintainability and faster development.




1) Can old (React 17) and new (React 19) co-exist?

No, not in a single runtime. Our old code is on React 17 and the new one is on React 19; hooks and context behave differently between versions. Even if we force-install the lightweight react-components-lib into the current txApp, it will break at runtime.

2) If not, how do we plan the migration?

Let’s move to a microfrontend + react-components-lib setup similar to what the WTP team did, with a few adjustments for txApp:

2.1 We don’t need separate repositories for atoms, molecules, and organisms. All txApp-specific components will live inside txApp under a /common folder. This way we avoid separate development and deployment cycles for a standalone “components” module—since we only need a shared set of common components, the extra repository no longer adds value. We can place those components directly in /common instead of maintaining a separate repo.

2.2 We should start using the FormRenderer I built. It replaces the manual creation of organisms, speeds up development, and handles optimization for us.

2.3 We need a solid “how-to” structure for creating modules/screens. Right now each team has its own approach, which leads to missed optimizations and poor performance. Since the framework team can’t review every implementation after the fact, we’ll require a PR review from us before merges—this adds a bit of time but this way we can avoid the future issues like what we currently have. If this is not possible, then the only thing we can do is to have a solid approach on “how to” (e.g., how to handle state, how to handle API fetching, and so on).

2.4 We should require meaningful behavior tests (not just “renders without crashing”). Today, many tests only check that a component renders, which won’t catch real regressions. Going forward, tests should cover the actual behavior of the screen (e.g., user interactions, API flow, validation, and error states) so a passing test truly means the feature still works.

3) If we migrate, should we also re-strategize (e.g., Next.js)?

Next.js is a solid library; however, I’m concerned our current machines may struggle to keep up with its local development workload. Please take note that in local development, Next.js drives higher resource usage—dev mode leans on more CPU cores, RAM, and a fast SSD. I’ll verify whether our current machines can handle this by installing Next.js and running a quick local test. The upside is that Next.js makes development easier because it provides a lot of what we need out of the box and follows industry-standard, more secure approaches—especially for auth.

On the other hand, the microfrontend I created works on its own with Vite, since that’s what it’s built on. If we decide to go with Next.js, I’ll need to create a microfrontend that uses Next.js instead of Vite. That should take about 1–3 days, depending on any issues I find.

Summary: We can’t run React 17 and React 19 together, so we should migrate. Use microfrontends + react-components-lib, create a clear module structure for developers to follow, and choose between Next.js or the current Vite-based microfrontend approach. I can start a POC, but I’ll need a single point person who understands the backend and how the API is currently used—just someone I can ask questions; no coding required so I can plan for maintainability and faster delivery.